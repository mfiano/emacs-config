#+TITLE: Emacs Configuration
#+AUTHOR: Michael Fiano
#+PROPERTY: header-args :tangle yes

* Introduction

** About
This is my Emacs configuration written in OrgMode. It attempts to keep my Emacs
directory clean, and document the choices I made. It can safely be used by
others as a starting point if they choose to, by following the installation
instructions below.

** Personal Background

My Emacs configuration is a result of approximately one year (as of
September 2016) of trying to learn Emacs. Prior to Emacs, I had been
successfully using Vim to code in various languages, Lisp dialects included, for
close to 20 years. With that said, I never tried to initially make Emacs be more
Vim-like by means of evil-mode or other similar packages or hacks. I strongly
feel that Emacs is its own thing, with a long history to be understood.
Therefor, despite my Vim background, you will not find any Vim-like behavior in
this configuration.

Notice the first sentence in the above paragraph uses the word "/trying/"; I am
far from being a master of the editor, probably due to the fact of giving it a
chance so late, and also because as some would say, it is not an editor - it
just has one included.

** What To Expect

As mentioned, I am somewhat of an Emacs beginner, and as such, this
configuration serves a few purposes:

1) Attempt to document the features that fit my workflow, so that I can remember
   why, and others can learn the reasoning behind the choices that I have made.
2) Present my configuration to the excellent community, with a possibility that
   I may get some feedback on how to improve it, and thus learning even more.
3) Portability - do not hard-code any potentially non-existent filesystem paths,
   operating system-specific settings, or personal details that would prevent it
   from operating correctly for another user.

Additionally you can expect the following from this configuration:

- Human-readable :: Presented in a plain-text OrgMode format, allowing for a
                    clean design with clear documentation.
- Clean :: Separation of concerns into dedicated document sections, with
           packages having a single top-level form.
- Languages :: Emphasis on support for Common Lisp and OrgMode.
- Graphical :: Designed to look and function nice in a graphical frame.
- Keys :: Each custom command is prefixed with either =C-c= for maximum
          portability.

** Installation

Note: These installation instructions assume a UNIX-style operating system, but
should work anywhere Emacs is supported if you adapt them.

To use this configuration, first make sure you meet the requirements:

- Emacs *25.1* or above.
- (recommended) Ability to start in a graphical frame.
- (recommended) The [[http://dejavu-fonts.org][DejaVu]] fonts installed for your operating system.

Then, backup your existing configuration if one exists:

#+BEGIN_SRC sh :tangle no
mv ~/.emacs ~/.emacs.bak
mv ~/.emacs.d ~/.emacs.d.bak
#+END_SRC

Now, you can clone this repository to your configuration directory:

#+BEGIN_SRC sh :tangle no
mkdir -pv ~/.emacs.d
git clone https://github.com/mfiano/emacs-config.git ~/.emacs.d
#+END_SRC

Finally, create and edit =private.el= with any configuration options you want to
override, or remain private in a dedicated file. Some suggested options to store
here would be your real name, email address, and passwords.

#+BEGIN_SRC sh :tangle no
emacs ~/.emacs.d/private.el
#+END_SRC

* Configuration

#+BEGIN_SRC emacs-lisp :exports none :padline no
  ;;;; emacs-config https://github.com/mfiano/emacs-config.git
  ;;;; DO NOT MODIFY THIS FILE. CHANGES TO THIS FILE WILL BE LOST.
  ;;;; This file is automatically generated by the bootstrapper.
  ;;;; Instead, modify 'emacs-config.org' which this file is generated from.
#+END_SRC

** Customization

*** Custom variables

These custom variables are defined early, to be used throughout the
configuration.

**** my/dir-home
The user's home directory.

#+BEGIN_SRC emacs-lisp
(defvar my/dir-home (file-name-as-directory (expand-file-name "~")))
#+END_SRC

**** my/dir-etc
The directory to store miscellaneous configuration files.

#+BEGIN_SRC emacs-lisp
(defvar my/dir-etc (expand-file-name (concat user-emacs-directory (file-name-as-directory "etc"))))
#+END_SRC

**** my/dir-backups
The directory to store backup files.

#+BEGIN_SRC emacs-lisp
(defvar my/dir-backups (concat my/dir-etc "backups"))
#+END_SRC

**** my/file-notes
The file to write our notes in. This file is loaded at startup, and also used to
refile notes to in OrgMode.

#+BEGIN_SRC emacs-lisp
(defvar my/file-notes "~/dev/org/refile.org")
#+END_SRC

**** my/file-sbcl-core
The path to a custom SBCL core image to use, or NIL to use the default.

#+BEGIN_SRC emacs-lisp
(defvar my/file-sbcl-core nil)
#+END_SRC
**** my/dir-list-org
A list of directories where OrgMode documents are recursively searched for.

It is recommended to use =add-to-list= in =private.el= to add any other directories
that contain OrgMode documents you want tracked.

#+BEGIN_SRC emacs-lisp
(defvar my/dir-list-org (list user-emacs-directory))
#+END_SRC
**** my/hooks-text
A list of mode hooks for editing text.

#+BEGIN_SRC emacs-lisp
(defvar my/hooks-text '(text-mode-hook org-mode-hook weechat-mode-hook))
#+END_SRC

**** my/hooks-lisp
A list of mode hooks for lisp code.

#+BEGIN_SRC emacs-lisp
(defvar my/hooks-lisp '(ielm-mode-hook
                        lisp-mode-hook
                        lisp-interaction-mode-hook
                        sly-mrepl-mode-hook
                        emacs-lisp-mode-hook
                        eval-expression-minibuffer-setup-hook))
#+END_SRC
**** my/hooks-web
A list of mode hooks for web development.

#+BEGIN_SRC emacs-lisp
(defvar my/hooks-web '(web-mode-hook css-mode-hook))
#+END_SRC

*** Custom functions

These custom functions are defined early, to be used throughout the
configuration.

**** kill-region
Advise =kill-region= to kill the line at point if no region is active.

Credit: [[http://emacs-fu.blogspot.de/2009/11/copying-lines-without-selecting-them.html][djcb]]
#+BEGIN_SRC emacs-lisp
(defadvice kill-region (before slick-cut activate compile)
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))
#+END_SRC

**** add-hooks
#+BEGIN_SRC emacs-lisp
(defun add-hooks (hooks fn)
  (dolist (hook hooks)
    (add-hook hook fn)))
#+END_SRC
**** my/smarter-move-beginning-of-line
Move to the first non-whitespace character of a line, or if already there, to
the beginning of the line.

Credit: [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][Bozhidar]]

#+BEGIN_SRC emacs-lisp
(defun my/smarter-move-beginning-of-line (arg)
  (interactive "^p")
  (setq arg (or arg 1))
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
#+END_SRC

**** my/yank-primary-selection
Paste the contents of the primary selection.

#+BEGIN_SRC emacs-lisp
(defun my/yank-primary-selection ()
  (interactive)
  (let ((primary (or (x-get-selection-value)
                     (x-get-selection))))
    (when primary
      (push-mark (point))
      (insert-for-yank primary))))
#+END_SRC

**** my/set-default-font
If the specified font exists, set it as the default font for all frames.
#+BEGIN_SRC emacs-lisp
(defun my/set-default-font (font-name size)
  (when (member font-name (font-family-list))
    (let ((font (format "%s %s" font-name size)))
      (add-to-list 'default-frame-alist (cons 'font font)))))
#+END_SRC

*** User customization

Use a separate =custom.el= file for Emacs =customize= to write to.

#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
#+END_SRC

** Basics

*** Hooks

Hooks are functions that are called at specific times. Here, we define some
common functionality that we want to occur at certain times in Emacs.

**** Delete trailing whitespace before saving a buffer.

It is easy to add extra whitespace at the end of a line, and can be quite
annoying when it happens. This will strip all whitespace from the end of each
line when you attempt to save the buffer.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

**** Prevent garbage collection while the minibuffer is open. Also set a better
garbage collection threshold.

Credit: [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold][Bailey Ling]]

#+BEGIN_SRC emacs-lisp
(add-hook 'minibuffer-setup-hook (lambda () (setq gc-cons-threshold most-positive-fixnum)))
(add-hooks '(after-init-hook minibuffer-exit-hook)
           (lambda () (setq gc-cons-threshold (* 1000 1000 10))))
#+END_SRC

*** Create directories

Create some required directories in our =.emacs.d= directory if they do not exist.

#+BEGIN_SRC emacs-lisp
(make-directory my/dir-etc t)
#+END_SRC

*** Key bindings


*** Files and buffers

**** Sensible options for buffers

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil
              default-tab-width 2
              indicate-emtpty-lines t
              truncate-lines t
              fill-column 80)
(setq create-lockfiles nil
      scroll-step 1
      sentence-end-double-space nil
      switch-to-visible-buffer nil)
(column-number-mode 1)
#+END_SRC

**** Open our OrgMode notes file at startup

#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice my/file-notes)
#+END_SRC

**** Sensible options for files.

#+BEGIN_SRC emacs-lisp
(setq-default find-file-visit-truename t)
(setq require-final-newline t
      read-file-name-completion-ignore-case t)
#+END_SRC

**** Prefer UTF-8 encoding for everything.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
#+END_SRC

*** Mouse support

We don't use the mouse often, but we should configure it to work better anyway.

#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t
      mouse-wheel-scroll-amount '(3)
      mouse-wheel-follow-mouse t
      mouse-wheel-progressive-speed nil
      mouse-sel-mode t
      mouse-yank-at-point t
      make-pointer-invisible t)
#+END_SRC

*** Look and feel

**** Disable cruft
We want a blank slate to start with. Turn off the cruft that only distracts and
annoys.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(tooltip-mode 0)
(blink-cursor-mode 0)
(setq inhibit-startup-screen t
      inhibit-startup-message t
      initial-scratch-message nil
      ring-bell-function 'ignore
      use-dialog-box nil
      display-time-default-load-average nil
      cursor-in-non-selected-windows nil
      echo-keystrokes 0.5)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

**** Customizations
Define the look and feel. The color theme will be applied later.

#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'hbar
              cursor-in-non-selected-windows nil)
(setq display-time-format "%I:%M%P")
(display-time-mode 1)
(fringe-mode '(8 . 0))
(my/set-default-font "DejaVu Sans Mono" 9)
(global-font-lock-mode t)
#+END_SRC

*** Version control

Set some sensible options when working with version-controlled files.

#+BEGIN_SRC emacs-lisp
(setq vc-make-backup-files t
      vc-follow-symlinks t)
#+END_SRC

*** File backups

Emacs has two features to prevent data loss - automatic backup, and automatic
saving.

Backups are automatically created when you save a file for the first time, and
by default they are stored in the same directory as the file being saved.

Automatic backups will be handled later on, with a package which backs up a file
each save, rather than only the first. Also, it creates a mirrored tree
structure of the filesystem, rather than storing a bunch of cryptic filenames in
the same directory.

We will disable the built-in automatic backups here.

#+BEGIN_SRC emacs-lisp
(setq backup-inhibited t)
#+END_SRC

Saves are automatically created every few seconds or characters typed, and also
are stored in the same directory as the file.

Automatic saving is not interesting to us, so we will disable it here.

#+BEGIN_SRC emacs-lisp
(setq auto-save-default nil
      auto-save-list-file-prefix nil)
#+END_SRC

*** Package sources

This configuration makes use of many Emacs packages available online. We need a
way to automatically download and install packages that we want to use. Also, we
would probably like a means to easily specify how each is configured.

**** Configure packaging
Configure Emacs to use the [[http://melpa.org][MELPA]] package archive, a third-party repository which
boasts itself as the largest and most up-to-date repository of Emacs packages.

#+BEGIN_SRC emacs-lisp
(setq package-user-dir (concat user-emacs-directory "src")
      package-enable-at-startup nil
      package--init-file-ensured t)
(package-initialize)
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/")))
#+END_SRC

**** Configure =use-package=
Install (if needed) and set up [[https://github.com/jwiegley/use-package][=use-package=]], in order to cleanly install and
configure different packages throughout our configuration.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))
(setq use-package-always-ensure t)
#+END_SRC

** Packages and Features

The remainder of this configuration will fetch and install packages as-needed
during the bootstrapping process. At no time during subsequent Emacs sessions
does a package ever automatically update. This is a design choice - we want to
ensure our work environment is consistent when we expect it to be. However,
occasionally we do want to upgrade one or more packages. This is preferred to be
a manual process, hand-selecting the packages we want to upgrade, and only after
backing up the currently installed packages.

To backup the packages, we can do so manually in the shell:

#+BEGIN_SRC sh :tangle no
mv ~/.emacs.d/src ~/.emacs.d/src.bak
#+END_SRC

*** epa-file
Some configuration options should be private, such as your email address,
passwords, etc. We will load an external encrypted file, =secrets.el.gpg= if it
exists.

#+BEGIN_SRC emacs-lisp
(use-package epa-file
  :ensure nil
  :init
  (let ((secrets-file (concat my/dir-etc "secrets.el.gpg")))
    (epa-file-enable)
    (when (file-exists-p secrets-file)
      (load-library secrets-file))))
#+END_SRC

*** auto-compile
When Emacs code is loaded, we want to automatically compile it into fast
byte-code.

#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config
  (progn
    (setq load-prefer-newer t)
    (auto-compile-on-load-mode)))
#+END_SRC

*** savehist
Save different types of history to disk.

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init (savehist-mode 1)
  :config
  (setq savehist-file (concat my/dir-etc "history")
        history-length 100
        history-delete-duplicates t
        savehist-save-minibuffer-history t
        savehist-autosave-interval 60
        savehist-additional-variables '(kill-ring
                                        search-ring
                                        regexp-search-ring)))
#+END_SRC

*** server
Start the Emacs server.

#+BEGIN_SRC emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
#+END_SRC

*** executable
When a buffer starts with a /shebang/ (the #! character sequence), we expect it to
be executable. This will mark the executable bit of the file after saving such a
buffer.

#+BEGIN_SRC emacs-lisp
(use-package executable
  :defer t
  :config (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p))
#+END_SRC


*** hydra
The =hydra= package provides the ability to group several commands under a single
key binding. It has the ability to list a legend above the echo area with the
various keys available for the particular grouping. In addition, once you enter
this menu with a simple key, you can continue to enter the various commands
without it closing, thus entering many commands from different packages with few
keystrokes. Within the group, keys highlighted in red do not close the group,
and keys highlighted in blue exit out of the group.

We will enable this functionality, and define groups of commands for packages to
later bind keys to.

#+BEGIN_SRC emacs-lisp
(use-package hydra)
#+END_SRC

*** paradox
While =use-package= lets us define the packages we want to use and their
configuration, we still need a way to browse, install and otherwise manipulate
Emacs packages. Emacs can do this out of the box, but =paradox= makes this
slightly less painful, so we'll install it.

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :config
  (setq paradox-execute-asynchronously t
        paradox-display-download-count t
        paradox-display-star-count t
        paradox-github-token t))
#+END_SRC

*** which-key
Show help for prefix keys.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (progn
    (which-key-mode 1)
    (setq which-key-idle-delay 0.5
          which-key-sort-order 'which-key-key-order-alpha
          which-key-key-replacement-alist '(("<\\([[:alnum:]-]+\\)>" . "\\1")
                                            ("left" . "◀")
                                            ("right" . "▶")
                                            ("up" . "▲")
                                            ("down" . "▼")
                                            ("delete" . "DEL")
                                            ("\\`DEL\\'" . "BKSP")
                                            ("next" . "PgDn")
                                            ("prior" . "PgUp"))))
  :diminish which-key-mode)
#+END_SRC

*** eldoc
Show arguments of functions as they are typed.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :defer t
  :commands turn-on-eldoc-mode
  :config
  (progn
    (setq-default eldoc-documentation-function 'describe-char-eldoc)
    (setq eldoc-idle-delay 0.1)
    (add-hooks my/hooks-lisp 'turn-on-eldoc-mode))
  :diminish eldoc-mode)
#+END_SRC

*** calendar
#+BEGIN_SRC emacs-lisp
(use-package calendar
  :defer t
  :config (setq calendar-week-start-day 1))
#+END_SRC

*** url
#+BEGIN_SRC emacs-lisp
(use-package url
  :ensure nil
  :config (setq url-cookie-file (concat my/dir-etc "url-cookies")))
#+END_SRC

*** goto-addr
Turn URLs into highlighted and clickable links.

#+BEGIN_SRC emacs-lisp
(use-package goto-addr
  :config
  (progn
    (add-hook 'text-mode-hook 'goto-address-mode)
    (add-hook 'prog-mode-hook 'goto-address-prog-mode)))
#+END_SRC

*** browse-url-dwim
Browse URLs in an external web browser.

#+BEGIN_SRC emacs-lisp
(use-package browse-url-dwim
  :config
  (setq browse-url-browser-function 'browse-url-xdg-open
        browse-url-dwim-always-confirm-extraction nil))
#+END_SRC

*** ispell
#+BEGIN_SRC emacs-lisp
(use-package ispell
  :defer t
  :config
  (progn
    (setq ispell-dictionary "en_US")
    (unless ispell-program-name
      (warn "aspell is not installed."))))
#+END_SRC

*** flyspell
On-the-fly spell checking for text and comments.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  (setq flyspell-use-meta-tab nil
        flyspell-issue-welcome-flag nil
        flyspell-issue-message-flag nil)
  :diminish flyspell-mode)
#+END_SRC

*** ag
Support for the /silver searcher/ search tool.

#+BEGIN_SRC emacs-lisp
(use-package ag
  :defer t
  :config
  (setq ag-highlight-search t
        ag-reuse-window nil
        ag-reuse-buffers t))
#+END_SRC

*** neotree
A file manager.

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :config (setq neo-smart-open t))
#+END_SRC

*** undo-tree
Better undo/redo support, with compressed, undo history that persists between
Emacs sessions.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :demand t
  :bind  (("C-z" . undo-tree-undo)
          ("C-S-z" . undo-tree-redo))
  :init
  (let ((undo-dir (file-name-as-directory (concat my/dir-etc "undo"))))
    (make-directory undo-dir t)
    (setq undo-tree-auto-save-history t
          undo-tree-history-directory-alist `(("." . ,undo-dir))
          undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t))
  :config
  (progn
    (global-undo-tree-mode)
    (defadvice undo-tree-make-history-save-file-name (after undo-tree activate)
      (setq ad-return-value (concat ad-return-value ".gz")))
    (add-hook 'write-file-functions 'undo-tree-save-history-hook)
    (add-hook 'find-file-hook 'undo-tree-load-history-hook))
  :diminish undo-tree-mode)
#+END_SRC

*** moe-theme
Define the color theme.

#+BEGIN_SRC emacs-lisp
(use-package moe-theme
  :config
  (progn
    (setq moe-theme-highlight-buffer-id nil
          moe-theme-mode-line-color 'blue)
    (moe-dark)))
#+END_SRC

*** smart-mode-line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :config
  (progn
    (setq sml/theme 'dark
          sml/shorten-directory t
          sml/shorten-modes t
          sml/name-width 10
          sml/mode-width 'full
          sml/line-number-format "%4l"
          sml/no-confirm-load-theme t)
    (sml/setup)))
#+END_SRC
*** indent-guide
Draw vertical lines in the buffer to guide indentation levels.

#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :config (add-hook 'prog-mode-hook 'indent-guide-mode)
  :diminish indent-guide-mode)
#+END_SRC

*** fill-column-indicator
Draw vertical lines in the buffer to indicate where the fill column is.

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :config
  (setq fci-rule-color "#444"
        fci-rule-use-dashes t
        fci-dash-pattern 0.5))
#+END_SRC

*** hl-line
Highlight the current line.

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :config (global-hl-line-mode 1))
#+END_SRC

*** highlight-numbers
Highlight numbers.

#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :config (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC

*** linum
Show line numbers.

#+BEGIN_SRC emacs-lisp
(use-package linum
  :config (set-face-attribute 'linum nil :weight 'normal :italic nil))
#+END_SRC

*** paren
Highlight the expression of matched parentheses at point.

#+BEGIN_SRC emacs-lisp
(use-package paren
  :config
  (progn
    (add-hook 'prog-mode-hook 'show-paren-mode)
    (setq show-paren-delay 0
          show-paren-style 'expression)))
#+END_SRC

*** uniquify
Make buffer names unique.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :ensure nil
  :config (setq uniquify-buffer-bane-style 'forward))
#+END_SRC

*** form-feed
Draw line break characters as visual lines.

#+BEGIN_SRC emacs-lisp
(use-package form-feed
  :init (setq form-feed-line-width fill-column)
  :config
  (progn
    (add-hooks my/hooks-text 'form-feed-mode)
    (add-hook 'prog-mode-hook 'form-feed-mode))
  :diminish form-feed-mode)
#+END_SRC

*** popwin
Manage pop-up windows.

#+BEGIN_SRC emacs-lisp
(use-package popwin
  :commands popwin-mode
  :init (popwin-mode 1)
  :config
  (progn
    (setq popwin:special-display-config nil)
    (push '("*Help*" :width 0.5 :position right)
          popwin:special-display-config)
    (push '(" *undo-tree*" :width 0.5 :position right)
          popwin:special-display-config)
    (push '("*ag-search*" :width 0.5 :position right)
          popwin:special-display-config)
    (push '(magit-status-mode :width 0.5 :position right :stick t)
          popwin:special-display-config)))
#+END_SRC

*** windmove
Move focus to an adjacent window.

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :bind
  (("<S-up>" . windmove-up)
   ("<S-down>" . windmove-down)
   ("<S-left>" . windmove-left)
   ("<S-right>" . windmove-right)))
#+END_SRC

*** ace-window
Jump to any window by number.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :defer t)
#+END_SRC

*** winner
Undo or redo changes to the window layout.

#+BEGIN_SRC emacs-lisp
(use-package winner
  :config (winner-mode 1))
#+END_SRC

*** transpose-frame
Re-arrange the window layout.

#+BEGIN_SRC emacs-lisp
(use-package transpose-frame)
#+END_SRC

*** workgroups
#+BEGIN_SRC emacs-lisp
(use-package workgroups
  :config
  (progn
    (setq wg-morph-on nil)
    (wg-load (concat my/dir-etc "workgroups")))
  :diminish workgroups-mode)
#+END_SRC
*** recentf
Track recent files that have been opened.

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :defer t
  :commands recentf-mode
  :init
  (setq recentf-save-file (concat my/dir-etc "recent")
        recentf-max-saved-items 1000
        recentf-exclude '(".emacs.d/src"
                          "^/tmp/"
                          "COMMIT_EDITMSG$"
                          ".gz$")
        recentf-auto-cleanup 300)
  :config (recentf-mode 1))
#+END_SRC

*** bookmark
Allow bookmarking the position in a file.

#+BEGIN_SRC emacs-lisp
(use-package bookmark
  :init
  (setq bookmark-default-file (concat my/dir-etc "bookmarks")
        bookmark-save-flag 1))
#+END_SRC


*** autorevert
Reload a file buffer when the file changes on disk.

#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :config
  (progn
    (global-auto-revert-mode 1)
    (setq auto-revert-remote-files t))
  :diminish auto-revert-mode)
#+END_SRC

*** saveplace
Remember the position of a buffer the next time we visit it.

#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :defer t
  :init (save-place-mode 1)
  :config
  (setq save-place-file (concat my/dir-etc "places")
        save-place-forget-unreadable-files nil))
#+END_SRC

*** backup-each-save
By default, Emacs only backs up a file the first time you save it. The following
package handles making backups of a file each time it is saved, into a tree
structure mirroring the filesystem.

#+BEGIN_SRC emacs-lisp
(use-package backup-each-save
  :defer t
  :init
  (progn
    (make-directory my/dir-backups t)
    (add-hook 'after-save-hook 'backup-each-save))
  :config
  (progn
    (defun backup-each-save-filter (filename)
      (let ((ignored-filenames
             `("^/tmp" "\\.emacs.d/src/" "\\.emacs.d/etc/" "custom.el"))
            (matched-ignored-filename nil))
        (mapc
         (lambda (x)
           (when (string-match x filename)
             (setq matched-ignored-filename t)))
         ignored-filenames)
        (not matched-ignored-filename)))
    (setq backup-each-save-mirror-location my/dir-backups
          backup-each-save-time-format "%Y-%m-%d_%H:%M:%S"
          backup-each-save-filter-function 'backup-each-save-filter)))
#+END_SRC

*** fill
Allow text to be auto-filled (wrapped to a new line if it would be past the fill
column). For code buffers, only auto-fill comments.

#+BEGIN_SRC emacs-lisp
(use-package fill
  :ensure nil
  :commands (turn-on-auto-fill auto-fill-mode)
  :init
  (progn
    (add-hooks my/hooks-text 'turn-on-auto-fill)
    (add-hook 'prog-mode-hook
              (lambda ()
                (setq-local comment-auto-fill-only-comments t)
                (auto-fill-mode 1)))
    (diminish 'auto-fill-function)))
#+END_SRC

*** delsel
Allow overwriting a selected region of text.

#+BEGIN_SRC emacs-lisp
(use-package delsel
  :config (delete-selection-mode 1))
#+END_SRC

*** subword
CamelCase words are popular in many programming languages. The various Emacs
commands that operate on words treat a CamelCase word as a single word. Instead,
we want these commands to treat them as multiple words, but only when editing
code.

#+BEGIN_SRC emacs-lisp
(use-package subword
  :init (global-subword-mode)
  :diminish subword-mode)
#+END_SRC

*** elec-pair
Enable pairing of parentheses (and some other characters). This will
automatically insert a character's closing sibling when the opening character is
inserted.

#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :config (electric-pair-mode 1))
#+END_SRC

*** expand-region
Expand/contract region selections.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :defer t)
#+END_SRC

*** comment-dwim-2
Comment/uncomment lines/regions intelligently.

#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
  :defer t
  :commands (comment-dwim-2))
#+END_SRC

*** avy
Quickly jump to occurences within a buffer.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :config
  (setq avy-style 'pre
        avy-all-windows nil
        avy-keys (nconc (number-sequence ?a ?z)
                        (number-sequence ?A ?Z)
                        (number-sequence ?1 ?9))))
#+END_SRC

*** move-text
Quickly move lines of text up or down.

#+BEGIN_SRC emacs-lisp
(use-package move-text)
#+END_SRC

*** swiper-helm
Quickly search for text.

#+BEGIN_SRC emacs-lisp
(use-package swiper-helm
  :bind (("C-s" . swiper-helm)))
#+END_SRC

*** fold-dwim
Fold blocks of text.

#+BEGIN_SRC emacs-lisp
(use-package fold-dwim)
#+END_SRC

*** helm
Completion/navgiation system for many things.

#+BEGIN_SRC emacs-lisp
(use-package helm
  :demand t
  :bind
  (("M-x" . helm-M-x)
   ("M-y" . helm-show-kill-ring)
   ("C-x C-f" . helm-find-files)
   ("C-x C-b" . helm-buffers-list)
   ("C-x b" . helm-buffers-list)
   ("C-x C-r" . helm-recentf)
   ("C-x r" . helm-recentf)
   :map helm-map
   ("<tab>" . helm-execute-persistent-action)
   :map helm-read-file-map
   ("<backspace>" . helm-find-files-up-one-level)
   :map helm-find-files-map
   ("<backspace>" . helm-find-files-up-one-level))
  :config
  (progn
    (helm-mode 1)
    (setq helm-display-header-line nil
          helm-idle-delay 0.0
          helm-input-idle-delay 0.01
          helm-quick-update t
          helm-split-window-in-side-p t
          helm-M-x-fuzzy-match t
          helm-M-x-requires-pattern nil
          helm-buffers-fuzzy-matching t
          helm-bookmark-show-location t
          helm-recentf-fuzzy-match t
          helm-move-to-line-cycle-in-source nil
          helm-ff-skip-boring-files t
          helm-ff-file-name-history-use-recentf nil
          helm-ff-file-compressed-list '("gz" "bz2" "zip" "tgz" "7z" "xz")
          helm-ff-file-name-history-use-recentf t
          helm-candidate-number-limit 100))
  :diminish helm-mode)
#+END_SRC

Completion of key bindings.

#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :defer 10)
#+END_SRC

Text completion.

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :config
  (progn
    (ac-config-default)
    (ac-flyspell-workaround)
    (ac-linum-workaround)
    (define-key ac-completing-map "\r" 'ac-complete)
    (setq ac-comphist-file (concat my/dir-etc "completion-history")
          ac-use-quick-help nil
          ac-ignore-case t
          ac-use-fuzzy t
          ac-trigger-key "TAB"
          ac-auto-start nil))
  :diminish auto-complete-mode)
#+END_SRC

*** projectile
Tracking of projects under version control.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer 3
  :init
  (setq projectile-cache-file (concat my/dir-etc "project-cache")
        projectile-known-projects-file (concat my/dir-etc "project-bookmarks"))
  :config
  (progn
    (projectile-global-mode)
    (add-to-list 'projectile-ignored-projects my/dir-home)
    (run-with-idle-timer 10 nil #'projectile-cleanup-known-projects)
    (setq projectile-completion-system 'helm
          projectile-find-dir-includes-top-level t))
  :diminish projectile-mode)
#+END_SRC

*** helm-projectile
Integrate project tracking into the Helm completion system.

#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :defer t
  :config
  (progn
    (helm-projectile-on)
    (setq projectile-switch-project-action 'helm-projectile)))
#+END_SRC

*** helm-ls-git
Integrate Git into the Helm completion system.

#+BEGIN_SRC emacs-lisp
(use-package helm-ls-git
  :defer t)
#+END_SRC

*** helm-ag
Integrate /ag/ into the Helm completion system.

#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :defer t
  :config (setq helm-ag-fuzzy-match t))
#+END_SRC

*** diff-hl
Highlight uncommited changes on the left side of a buffer's window.

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :defer 5
  :config
  (progn
    (global-diff-hl-mode 1)
    (add-hook 'prog-mode-hook (lambda () (diff-hl-flydiff-mode t)))
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (unless (display-graphic-p)
      (diff-hl-margin-mode))))
#+END_SRC

*** magit
Interface to the Git version control utility.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :config
  (progn
    (setq magit-log-arguments '("--graph"
                                "--decorate"
                                "--color")
          magit-save-repository-buffers 'dontask
          magit-revert-buffers 'silent)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))
#+END_SRC

*** git-timemachine
Allow going back in time to a previous commit for a buffer.

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :config (setq git-timemachine-abbreviation-length 8))
#+END_SRC

*** gist
Allow creating GitHub gists from regions/buffers.

#+BEGIN_SRC emacs-lisp
(use-package gist
  :defer t
  :config (setq gist-view-gist t)
  :diminish gist-mode)
#+END_SRC

*** smtpmail
#+BEGIN_SRC emacs-lisp
(use-package smtpmail
  :ensure nil
  :config
  (progn
    (setq message-send-mail-function 'smtpmail-send-it
          starttls-use-gnutls t
          smtpmail-starttls-credentials `((,smtpmail-smtp-server 587 nil nil))
          smtpmail-auth-credentials (concat my/dir-home ".authinfo.gpg"))))
#+END_SRC
*** mu4e
#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :ensure nil
  :config
  (progn
    (setq mu4e-maildir (concat my/dir-home ".mail/gmail")
          mu4e-sent-messages-behavior 'delete
          mu4e-maildir-shortcuts '(("/INBOX"))
          mu4e-update-interval 120
          mu4e-get-mail-command "mbsync -a"
          mu4e-attachment-dir (concat my/dir-home "downloads"))))
#+END_SRC
*** gnutls
#+BEGIN_SRC emacs-lisp
(use-package gnutls
  :config
  (progn
    (setq nsm-settings-file (concat my/dir-etc "gnutls.dat"))
    (add-to-list 'gnutls-trustfiles (concat my/dir-etc "weechat.cert"))))
#+END_SRC
*** weechat

#+BEGIN_SRC emacs-lisp
(defun my/irc-connect ()
  (interactive)
  (weechat-connect my/irc-host
                   my/irc-port
                   my/irc-password
                   my/irc-mode))

(use-package tracking)

(use-package weechat
  :config
  (progn
    (setq weechat-buffer-kill-buffers-on-disconnect t
          wechat-completing-read-function 'helm-comp-read
          weechat-auto-monitor-buffers my/irc-monitored-buffers
          weechat-fill-column 80)))

(use-package weechat-tracking
  :ensure nil
  :config (setq weechat-tracking-types '(:highlight :message)))
#+END_SRC
*** org
Org mode is for taking notes, planning projects, and authoring documents.

#+BEGIN_SRC emacs-lisp
(defun my/org-all-files ()
  (mapcan
   (lambda (dir)
     (remove-if
      (lambda (path)
        (or (string-match-p "\\.emacs.d/src/" path)
            (file-symlink-p path)))
      (directory-files-recursively dir "\.org$")))
   my/dir-list-org))

(defun my/org-all-buffers ()
  (mapcar 'buffer-file-name (org-buffer-list 'files)))

(defun my/org-all-files-and-buffers ()
  (let ((files (my/org-all-files))
        (buffers (my/org-all-buffers))
        (results))
    (dolist (item (append buffers files))
      (add-to-list 'results item))
    (sort results 'string<)))

(defun my/helm-org-all-files-and-buffers ()
  (interactive)
  (helm :sources '((name . "OrgMode Files and Buffers")
                   (candidates . my/org-all-files-and-buffers)
                   (fuzzy-match . t)
                   (action . (lambda (x) (find-file x))))
        :buffer "*helm-org-all-files-and-buffers*"))

(use-package org
  :defer t
  :after windmove
  :config
  (progn
    (setq org-agenda-files (my/org-all-files-and-buffers)
          org-default-notes-file my/file-notes
          org-export-backends '(ascii html md)
          org-catch-invisible-edits 'show-and-error
          org-log-done t
          org-log-into-drawer t
          org-tags-column 82
          org-agenda-tags-column 100
          org-agenda-text-search-extra-files 'agenda-files
          org-agenda-start-on-weekday 1
          org-cycle-separator-lines 0
          org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
          org-blank-before-new-entry '((heading . auto)
                                       (plain-list-item . auto))
          org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "|" "DONE(d)")
                              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")
                              (sequence "REPORTED(r@/!)" "BUG(b@/!)" "|" "FIXED(f@/!)"))
          org-todo-keyword-faces '(("TODO" :foreground "dodger blue" :weight bold)
                                   ("INPROGRESS" :foreground "spring green" :weight bold)
                                   ("WAITING" :foreground "yellow" :weight bold)
                                   ("HOLD" :foreground "yellow" :weight bold)
                                   ("DONE" :foreground "forest green" :weight bold)
                                   ("CANCELLED" :foreground "forest green" :weight bold)
                                   ("REPORTED" :foreground "red" :weight bold)
                                   ("BUG" :foreground "red" :weight bold)
                                   ("FIXED" :foreground "forest green" :weight bold))
          org-tag-alist '((:startgroup . nil)
                          ("work" . ?w)
                          ("home" . ?h)
                          (:endgroup . nil)
                          ("computer" . ?c)
                          ("dev" . ?d)
                          ("gamedev" . ?g)
                          ("research" . ?r)
                          ("buy" . ?b)
                          ("idea" . ?i)
                          ("note" . ?n))
          org-tag-faces '(("work" :foreground "green")
                          ("home" :foreground "dodger blue")
                          ("computer" :foreground "dodger blue")
                          ("dev" :foreground "tomato")
                          ("gamedev" :foreground "tomato")
                          ("research" :foreground "dodger blue")
                          ("buy" :foreground "dodger blue")
                          ("idea" :foreground "dodger blue")
                          ("note" :foreground "dodger blue"))
          org-todo-state-tags-triggers '(("CANCELLED" ("CANCELLED" . t))
                                         ("WAITING" ("WAITING" . t))
                                         ("HOLD" ("WAITING") ("HOLD" . t))
                                         (done ("WAITING") ("HOLD"))
                                         ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("INPROGRESS" ("WAITING") ("CANCELLED") ("HOLD"))
                                         ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))
          org-capture-templates '(("t" "Task" entry (file org-default-notes-file)
                                   "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n")
                                  ("j" "Journal" entry (file+datetree "~/dev/org/personal/journal.org")
                                   "* %?\n%U\n")
                                  ("n" "Note" entry (file org-default-notes-file)
                                   "* %? :note:\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n")
                                  ("d" "Dev Note" entry (file org-default-notes-file)
                                   "* %? :note:dev:\n:PROPERTIES:\n:CREATED: %U\n:END:\n%a\n"))
          org-refile-targets '((nil :maxlevel . 5)
                               (my/org-all-files-and-buffers :maxlevel . 5))
          org-agenda-dim-blocked-tasks nil
          org-agenda-compact-blocks t
          org-agenda-custom-commands '(("N" "Notes" tags "NOTE"
                                        ((org-agenda-overriding-header "Notes")
                                         (org-tags-match-list-sublevels t)))
                                       ("R" "Refile" tags "REFILE"
                                        ((org-agenda-overriding-header "To be refiled")
                                         (org-tags-match-list-sublevels nil))))
          org-treat-S-cursor-todo-selection-as-state-change nil
          org-use-fast-todo-selection t
          org-use-fast-tag-selection t
          org-outline-path-complete-in-steps nil
          org-refile-use-outline-path t
          org-startup-indented t
          org-cycle-include-plain-lists t
          org-ellipsis " […]"
          org-return-follows-link t
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-hide-emphasis-markers t
          org-src-preserve-indentation t
          org-enforce-todo-dependencies t
          org-startup-folded t
          org-enforce-todo-checkbox-dependencies t)
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftright-final-hook 'windmove-right)))
#+END_SRC

Automatically indent Org mode Text.

#+BEGIN_SRC emacs-lisp
(use-package org-indent
  :ensure nil
  :after org
  :defer t
  :diminish org-indent-mode)
#+END_SRC

Use fancy UTF-8 bullet characters in Org mode.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** rainbow-mode
Highlight color identifiers with a background of the same color.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :config (add-hooks my/hooks-web 'rainbow-mode)
  :diminish rainbow-mode)
#+END_SRC

*** htmlize
Export the contents of a buffer as HTML.

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :after (fill-column-indicator flyspell)
  :config
  (progn
    (defvar my/htmlize-initial-fci-state nil)
    (defun my/htmlize-before-hook-fci-disable ()
      (setq my/htmlize-initial-fci-state fci-mode)
      (when fci-mode
        (fci-mode -1)))
    (defun my/htmlize-after-hook-fci-enable-maybe ()
      (when my/htmlize-initial-fci-state
        (fci-mode 1)))
    (add-hook 'htmlize-before-hook 'my/htmlize-before-hook-fci-disable)
    (add-hook 'htmlize-after-hook 'my/htmlize-after-hook-fci-enable-maybe)
    (defvar my/htmlize-initial-flyspell-state nil)
    (defun my/htmlize-before-hook-flyspell-disable ()
      (setq my/htmlize-initial-flyspell-state flyspell-mode)
      (when flyspell-mode
        (flyspell-mode -1)))
    (defun my/htmlize-after-hook-flyspell-enable-maybe ()
      (when my/htmlize-initial-flyspell-state
        (flyspell-mode 1)))
    (add-hook 'htmlize-before-hook 'my/htmlize-before-hook-flyspell-disable)
    (add-hook 'htmlize-after-hook 'my/htmlize-after-hook-flyspell-enable-maybe)))
#+END_SRC

*** web-mode
Editing HTML.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer t
  :mode "\\.html?\\'"
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-enable-auto-pairing t))
#+END_SRC

*** css-eldoc
CSS documentation.

#+BEGIN_SRC emacs-lisp
(use-package css-eldoc
  :defer t
  :commands turn-on-css-eldoc
  :init (add-hook 'css-mode-hook 'turn-on-css-eldoc))
#+END_SRC

*** ielm
An Elisp REPL.

#+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :defer t
  :config
  (progn
    (add-hook 'ielm-mode-hook 'ac-emacs-lisp-mode-setup)
    (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)))
#+END_SRC

*** paredit
Manipulation of s-expressions.

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :defer t
  :init (add-hooks my/hooks-lisp 'enable-paredit-mode)
  :config
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round)
  :diminish paredit-mode)
#+END_SRC

*** rainbow-delimiters
Color parentheses based on their depth.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (progn
    (add-hooks my/hooks-lisp 'rainbow-delimiters-mode)
    (cl-loop with colors = '("#ff4b4b" "#5fafd7")
             for index from 1 to rainbow-delimiters-max-face-count
             do (set-face-foreground
                 (intern (format "rainbow-delimiters-depth-%d-face" index))
                 (elt colors (if (cl-evenp index) 0 1))))
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground 'unspecified
                        :inherit 'show-paren-mismatch)))
#+END_SRC

*** sly
A Common Lisp IDE.

#+BEGIN_SRC emacs-lisp
(defvar my/sly-sbcl-options
  (if my/file-sbcl-core
      `("sbcl" "--core" ,(expand-file-name my/file-sbcl-core))
    '("sbcl")))

(use-package sly
  :defer t
  :bind
  (:map sly-mrepl-mode-map
        ("<up>" . sly-mrepl-previous-input-or-button)
        ("<down>" . sly-mrepl-next-input-or-button)
        ("C-c M-o" . sly-mrepl-clear-repl)
        ("C-c q" . sly-restart-inferior-lisp))
  :config
  (progn
    (setq sly-lisp-implementations `((sbcl ,my/sly-sbcl-options))
          sly-mrepl-history-file-name (concat my/dir-etc "sly-repl-history")
          sly-autodoc-use-multiline t
          sly-complete-symbol*-fancy t
          sly-complete-symbol-function 'sly-flex-complete-symbol
          sly-kill-without-query-p t
          sly-repl-history-remove-duplicates t
          sly-repl-history-trim-whitespaces t
          sly-net-coding-system 'utf-8-unix)
    (sly-setup '(sly-fancy))))
#+END_SRC

*** sly-macrostep
Expand Common Lisp macros in the buffer.

#+BEGIN_SRC emacs-lisp
(use-package sly-macrostep
  :defer t)
#+END_SRC

*** ac-sly
Code completion for Common Lisp.

#+BEGIN_SRC emacs-lisp
(use-package ac-sly
  :after sly
  :defer t
  :config
  (progn
    (add-hook 'sly-mode-hook (lambda () (set-up-sly-ac t)))
    (add-to-list 'ac-modes 'sly-mrepl-mode)))
#+END_SRC

*** sh-script
Enable support for shell scripts.

#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :mode (("\\.*bashrc$" . sh-mode)
         ("\\.*bash_profile$" . sh-mode)
         ("\\.sh\\'" . sh-mode)
         ("\\.*zshrc$" . sh-mode)
         ("\\.zsh\\'" . sh-mode))
  :config
  (setq-default sh-indentation 2
                sh-basic-offset 2))
#+END_SRC

** Key Bindings
*** Disable annoying keys
Disable some annoying key bindings.

#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<S-down-mouse-1>"))
(global-unset-key (kbd "<S-down-mouse-3>"))
(global-unset-key (kbd "<C-down-mouse-1>"))
(global-unset-key (kbd "<C-down-mouse-3>"))
(global-unset-key (kbd "<insert>"))
(global-unset-key (kbd "<C-insert>"))
#+END_SRC

*** Primary selection pasting
We want to be able to paste the contents of the primary selection with =Shift +
Insert= like other applications.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<S-insert>") 'my/yank-primary-selection)
#+END_SRC

*** Smarter moving to beginning of line
Toggle between moving to the first non-whitespace character of a line and the
beginning of a line.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap move-beginning-of-line] 'my/smarter-move-beginning-of-line)
#+END_SRC
*** Emacs help
Command group for looking up help in Emacs. Open it with =C-c h=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-help (:exit t :hint nil)
  "
  ^Describe^
  ^^--------------
  _c_: Character
  _f_: Function
  _k_: Key (brief)
  _K_: Key
  _m_: Modes
  _v_: Variable
  "
  ("c" describe-char)
  ("f" describe-function)
  ("k" describe-key-briefly)
  ("K" describe-key)
  ("m" describe-mode)
  ("v" describe-variable))
  (global-set-key (kbd "C-c h") 'my/hydra-help/body)
#+END_SRC

*** Application launching
Command group to launch various utilities and applications. Open it with =C-c e=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-exec (:exit t :hint nil)
  "
  ^Utilities^
  ^^--------------
  [_b_]rowse URL
  [_c_]alendar
  [_e_]lisp REPL
  [_E_]mail client
  [_f_]ile manager
  [_i_]rc client
  [_p_]ackages
  "
  ("b" browse-url-dwim-guess)
  ("c" calendar)
  ("e" ielm)
  ("E" mu4e)
  ("f" neotree-toggle)
  ("i" my/irc-connect)
  ("p" paradox-list-packages))
  (global-set-key (kbd "C-c e") 'my/hydra-exec/body)
#+END_SRC

*** Toggle settings
Command group to toggle various settings.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-toggle (:exit t :hint nil)
  "
_l_: toggle line numbers
_f_: toggle fill column indicator
"
  ("l" linum-mode)
  ("f" fci-mode))
(global-set-key (kbd "C-c z") 'my/hydra-toggle/body)
(global-set-key (kbd "s-z") 'my/hydra-toggle/body)
#+END_SRC

*** Window management
Command group for managing windows. Open it with =C-c w=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-windows (:hint nil)
  "
  ^Layout^                         ^Move Focus^
  ^^^^------------------------------------------------------
  _<C-left>_ : Undo                _<up>_   : Up
  _<C-right>_: Redo                _<down>_ : Down
  _f_        : Flip vertically     _<left>_ : Left
  _F_        : Flip horizontally   _<right>_: Right
  _s_        : Split vertically    _w_      : Jump by number
  _S_        : Split horizontally
  _d_        : Delete window
  _D_        : Delete others

  _q_uit
  "
  ("<C-left>" winner-undo)
  ("<C-right>" winner-redo)
  ("<up>" windmove-up)
  ("<down>" windmove-down)
  ("<left>" windmove-left)
  ("<right>" windmove-right)
  ("w" ace-window :exit t)
  ("f" flip-frame)
  ("F" flop-frame)
  ("s" (progn (split-window-below) (windmove-down)))
  ("S" (progn (split-window-right) (windmove-right)))
  ("d" delete-window :exit t)
  ("D" delete-other-windows :exit t)
  ("q" nil))
  (global-set-key (kbd "C-c w") 'my/hydra-windows/body)
#+END_SRC

*** Text manipulation
Command group for manipulating text. Open it with =C-c t=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-fold (:hint nil :pre (hs-minor-mode 1))
  "
  ^Folding^
  ^^--------------
  _f_: toggle fold
  _h_: hide all
  _s_: show all

  _q_uit, _c_ancel
  "
  ("f" fold-dwim-toggle)
  ("h" fold-dwim-hide-all)
  ("s" fold-dwim-show-all)
  ("q" nil)
  ("c" my/hydra-text/body :exit t))

  (defhydra my/hydra-text (:hint nil)
    "
  ^Text Manipulation^
  ^^--------------------------------
  _+_     : expand region
  _-_     : contract region
  _c_     : toggle line/region commented
  _f_     : fold text
  _jc_    : jump to character
  _jw_    : jump to word
  _jl_    : jump to line
  _<up>_  : move line or region up
  _<down>_: move line or region down
  _s_     : enable spell-checking
  _S_     : disable spell-checking
  _z_     : undo last change
  _Z_     : redo last change
  _u_     : show undo tree

  _q_uit
  "
    ("+" er/expand-region)
    ("-" er/contract-region)
    ("c" comment-dwim-2)
    ("f" my/hydra-fold/body :exit t)
    ("jc" avy-goto-char :exit t)
    ("jw" avy-goto-word-1 :exit t)
    ("jl" avy-goto-line :exit t)
    ("<up>" move-text-up)
    ("<down>" move-text-down)
    ("s" (flyspell-mode 1) :exit t)
    ("S" (flyspell-mode 0) :exit t)
    ("z" undo-tree-undo)
    ("Z" undo-tree-redo)
    ("u" undo-tree-visualize :exit t)
    ("q" nil))
  (global-set-key (kbd "C-c t") 'my/hydra-text/body)
#+END_SRC

*** Searching
Command group for searching for things. Open it with =C-c s=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-search (:exit t :hint nil)
  "
  ^Buffer^            ^Project^           ^Web^
  ^^^^^^---------------------------------------------
  _b_: this buffer    _p_: this project   _g_: google
  _B_: all buffers

  _q_uit
  "
  ("b" swiper-helm)
  ("B" helm-ag-buffers)
  ("g" helm-google-suggest)
  ("p" helm-ag-project-root)
  ("q" nil))
  (global-set-key (kbd "C-c s") 'my/hydra-search/body)
#+END_SRC

*** Project management
Command group for working with projects. Open it with =C-c p=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-projects (:exit t :hint nil)
  "
  ^Project Management^
  ^^----------------------------
  _f_: find file in project
  _k_: kill all project buffers
  _r_: find recent project files
  _p_: switch project
  _s_: save all project files

  _q_uit
  "
  ("f" projectile-find-file)
  ("k" projectile-kill-buffers)
  ("r" projectile-recentf)
  ("p" projectile-switch-project)
  ("s" projectile-save-project-buffers)
  ("q" nil))
  (global-set-key (kbd "C-c p") 'my/hydra-projects/body)
#+END_SRC

*** Menu browsing
Command group for browsing various menus. Open it with =C-c x=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-menu (:exit t :hint nil)
  "
  ^Menu^
  ^^-----------------
  _b_: buffers
  _B_: bookmarks
  _f_: files
  _k_: kill ring
  _K_: key bindings
  _p_: browse project
  _r_: recent files
  "
  ("b" helm-buffers-list)
  ("B" helm-bookmarks)
  ("f" helm-find-files)
  ("k" helm-show-kill-ring)
  ("K" helm-descbinds)
  ("p" helm-browse-project)
  ("r" helm-recentf))
  (global-set-key (kbd "C-c x") 'my/hydra-menu/body)
#+END_SRC

*** Version control
Command group for git functions. Open it with =C-c g=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-git (:exit t :hint nil)
  "
  ^Gists^                 ^Git^
  ^^^^-------------------------
  _l_: list gists         _s_: Git status
  _g_: post gist
  _G_: post private gist

  _q_uit
  "
  ("l" gist-list)
  ("g" gist-region-or-buffer)
  ("G" gist-region-or-buffer-private)
  ("s" magit-status)
  ("q" nil))
  (global-set-key (kbd "C-c g") 'my/hydra-git/body)
#+END_SRC

*** OrgMode commands
Command group for OrgMode. Open it with =C-c o=.

#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-org (:exit t :hint nil)
  "
^OrgMode^
^^-----------
_a_: open agenda
_A_: archive item
_c_: capture
_f_: refile item
_F_: find org file
_l_: copy link
_L_: paste link
_t_: add tags
"
  ("a" org-agenda)
  ("A" archive)
  ("c" helm-org-capture-templates)
  ("f" org-refile)
  ("F" my/helm-org-all-files-and-buffers)
  ("l" org-store-link)
  ("L" org-insert-link)
  ("t" org-set-tags-command))
(global-set-key (kbd "C-c o") 'my/hydra-org/body)
#+END_SRC
