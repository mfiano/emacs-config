#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle yes

* Package Setup
** Package Sources
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-user-dir (concat user-emacs-directory "src")
      package-enable-at-startup nil
      package--init-file-ensured t)
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
(package-initialize)
#+END_SRC
** Package Installer
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t)

(use-package quelpa)
(use-package quelpa-use-package)
#+END_SRC
* Personal
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Michael Fiano"
      user-mail-address "michael.fiano@gmail.com")
#+END_SRC
* Variables
#+BEGIN_SRC emacs-lisp
(defvar lisp-hooks
  '(ielm-mode-hook
    lisp-mode-hook
    lisp-interaction-mode-hook
    sly-mrepl-mode-hook
    emacs-lisp-mode-hook
    eval-expression-minibuffer-setup-hook
    scheme-mode-hook))
#+END_SRC
* Create Directories
#+BEGIN_SRC emacs-lisp
(defvar my/dir-etc (file-name-as-directory (expand-file-name "~/.emacs.d/etc")))
(make-directory my/dir-etc t)
#+END_SRC
* Customize
#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
#+END_SRC
* Optimizations
#+BEGIN_SRC emacs-lisp
(add-hook 'minibuffer-setup-hook (lambda () (setq gc-cons-threshold most-positive-fixnum)))
(dolist (hook '(after-init-hook minibuffer-exit-hook))
  (add-hook hook (lambda () (setq gc-cons-threshold (* 1000 1000 10)))))
#+END_SRC
* User Interface
** Disable Distractions
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
(tooltip-mode 0)
(line-number-mode 0)
(setq ring-bell-function 'ignore
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t
      initial-scratch-message nil
      use-dialog-box nil
      display-time-default-load-average nil)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Enable Extras
#+BEGIN_SRC emacs-lisp
(setq display-time-format "%I:%M%P"
      image-animate-loop t
      split-width-threshold nil)
(display-time-mode 1)
(fringe-mode '(8 . 0))
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "Iosevka Slab Medium 9"))
(setq jit-lock-defer-time nil)
#+END_SRC
** Cursor
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
(setq-default cursor-type 'hbar
              cursor-in-non-selected-windows nil)
#+END_SRC
** Mouse
#+BEGIN_SRC emacs-lisp
(setq scroll-step 1
      mouse-wheel-scroll-amount '(3)
      mouse-wheel-follow-mouse t
      mouse-wheel-progressive-speed nil
      mouse-sel-mode t
      mouse-yank-at-point t
      make-pointer-invisible t)
#+END_SRC
* UTF-8
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8
      locale-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
#+END_SRC
* File and Buffer Settings
#+BEGIN_SRC emacs-lisp
(defadvice kill-region (before slick-cut activate compile)
  (interactive
   (if mark-active (list (region-beginning) (region-end))
     (list (line-beginning-position)
           (line-beginning-position 2)))))

(defun my/smarter-move-beginning-of-line (arg)
  (interactive "^p")
  (setq arg (or arg 1))
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

(global-set-key (kbd "C-x C-k") 'kill-this-buffer)

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(setq-default indicate-empty-lines t
              truncate-lines t
              fill-column 80
              switch-to-visible-buffer nil
              require-final-newline t
              sentence-end-double-space nil
              create-lockfiles nil
              read-file-name-completion-ignore-case t
              backup-inhibited t
              auto-save-default nil
              auto-save-list-file-prefix nil
              find-file-visit-truename t)

#+END_SRC
* Input
** Disable Keys
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "<S-down-mouse-1>"))
(global-unset-key (kbd "<S-down-mouse-3>"))
(global-unset-key (kbd "<C-down-mouse-1>"))
(global-unset-key (kbd "<C-down-mouse-3>"))
(global-unset-key (kbd "<insert>"))
(global-unset-key (kbd "<C-insert>"))
#+END_SRC
** Clipboard Support
#+BEGIN_SRC emacs-lisp
(defun my/yank-primary-selection ()
  (interactive)
  (let ((primary (or (x-get-selection-value)
                     (x-get-selection))))
    (when primary
      (push-mark (point))
      (insert-for-yank primary))))

(global-set-key (kbd "<S-insert>") 'my/yank-primary-selection)

(setq x-select-enable-clipboard t)
#+END_SRC
** Key Behavior
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil
              default-tab-width 2)
(setq echo-keystrokes 0.1)

(global-set-key [remap move-beginning-of-line] 'my/smarter-move-beginning-of-line)
#+END_SRC
* Packages
** auto-compile
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :init
  (progn
    (setq load-prefer-newer t)
    (auto-compile-on-load-mode 1)
    (auto-compile-on-save-mode 1)))
#+END_SRC
** server
#+BEGIN_SRC emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
#+END_SRC
** executable
#+BEGIN_SRC emacs-lisp
(use-package executable
  :commands executable-make-buffer-file-executable-if-script-p
  :init (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p))
#+END_SRC
** savehist
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :config
  (progn
    (setq savehist-file (concat my/dir-etc "history")
          history-length 1000
          history-delete-duplicates t
          savehist-save-minibuffer-history t
          savehist-autosave-interval 120
          savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
    (savehist-mode 1)))
#+END_SRC
** undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :commands (undo-tree-save-history-hook undo-tree-load-history-hook)
  :bind (("C-z" . undo-tree-undo)
         ("C-S-z" . undo-tree-redo))
  :init
  (let ((undo-dir (concat my/dir-etc "undo/")))
    (make-directory undo-dir t)
    (add-hook 'write-file-functions 'undo-tree-save-history-hook)
    (add-hook 'find-file-hook 'undo-tree-load-history-hook)
    (setq undo-tree-auto-save-history t
          undo-tree-history-directory-alist `(("." . ,undo-dir))
          undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t))
  :config (global-undo-tree-mode)
  :diminish undo-tree-mode)
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :commands (avy-goto-char avy-goto-word-1 avy-goto-line)
  :config
  (setq avy-style 'pre
        avy-all-windows nil
        avy-background t
        avy-keys (nconc (number-sequence ?a ?z)
                        (number-sequence ?A ?Z)
                        (number-sequence ?1 ?9))))
#+END_SRC
** whitespace-cleanup-mode
#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :init (global-whitespace-cleanup-mode 1)
  :diminish whitespace-cleanup-mode)
#+END_SRC
** delsel
#+BEGIN_SRC emacs-lisp
(use-package delsel
  :config (delete-selection-mode 1))
#+END_SRC
** subword
#+BEGIN_SRC emacs-lisp
(use-package subword
  :init (global-subword-mode 1)
  :diminish subword-mode)
#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :bind (:map elfeed-search-mode-map
              ("SPC" . my/hydra-feeds/body))
  :commands (elfeed elfeed-db-compact)
  :init
  (progn
    (add-hook 'elfeed-show-mode-hook 'visual-line-mode)
    (add-hook 'elfeed-show-mode-hook 'visual-fill-column-mode))
  :config
  (progn
    (defalias 'elfeed-toggle-star
      (elfeed-expose #'elfeed-search-toggle-all 'starred))
    (defface elfeed-search-starred-title-face
      '((t :foreground "#f77"))
      "Marks a starred Elfeed entry.")
    (defface lisp-elfeed-entry
      '((t :foreground "lime green"))
      "Elfeed face for entries tagged as lisp.")
    (defface emacs-elfeed-entry
      '((t :foreground "salmon"))
      "Elfeed face for entries tagged as emacs.")
    (defface racket-elfeed-entry
      '((t :foreground "deep sky blue"))
      "Elfeed face for entries tagged as racket.")
    (add-to-list 'elfeed-search-face-alist '(lisp lisp-elfeed-entry))
    (add-to-list 'elfeed-search-face-alist '(emacs emacs-elfeed-entry))
    (add-to-list 'elfeed-search-face-alist '((starred elfeed-search-starred-title-face)))
    (setq url-queue-timeout 30
          elfeed-search-title-max-width 150
          elfeed-search-date-format '("%Y-%m-%d, %I:%M%P" 20 :left)
          elfeed-db-directory (concat my/dir-etc "elfeed/"))
    (setq-default elfeed-search-filter "@1-month-ago +unread ")))

(use-package elfeed-org
  :config
  (progn
    (elfeed-org)
    (setq rmh-elfeed-org-files (list (concat my/dir-etc "elfeed/feeds.org")))))
#+END_SRC
** ielm
#+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :defer t
  :bind
  (:map ielm-map
        ("<up>" . comint-previous-input)
        ("<down>" . comint-next-input)))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (progn
    (which-key-mode 1)
    (setq which-key-idle-delay 0.5
          which-key-sort-order 'which-key-key-order-alpha
          which-key-key-replacement-alist '(("<\\([[:alnum:]-]+\\)>" . "\\1")
                                            ("left" . "◀")
                                            ("right" . "▶")
                                            ("up" . "▲")
                                            ("down" . "▼")
                                            ("delete" . "DEL")
                                            ("\\`DEL\\'" . "BKSP")
                                            ("next" . "PgDn")
                                            ("prior" . "PgUp"))))
  :diminish which-key-mode)
#+END_SRC
** popwin
Manage pop-up windows.

#+BEGIN_SRC emacs-lisp
(use-package popwin
  :commands popwin-mode
  :init (popwin-mode 1)
  :config
  (progn
    (setq popwin:special-display-config nil)
    (push '("*Help*" :width 0.5 :position right)
          popwin:special-display-config)
    (push '(" *undo-tree*" :width 0.5 :position right)
          popwin:special-display-config)
    (push '("*ag-search*" :width 0.5 :position right)
          popwin:special-display-config)
    (push '(magit-status-mode :width 0.5 :position right :stick t)
          popwin:special-display-config)))
#+END_SRC
** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("M-w" . ace-window))
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
        aw-scope 'frame
        aw-background t))
#+END_SRC
** nlinum
#+BEGIN_SRC emacs-lisp
(use-package nlinum
  :commands nlinum-mode)
#+END_SRC
** hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :defer t)
#+END_SRC
** paradox
#+BEGIN_SRC emacs-lisp
(use-package paradox
  :commands paradox-list-packages
  :config
  (setq paradox-execute-asynchronously t
        paradox-display-download-count t
        paradox-display-star-count t
        paradox-github-token t))
#+END_SRC
** eldoc
#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :commands turn-on-eldoc-mode
  :init
  (dolist (hook lisp-hooks)
    (add-hook hook 'turn-on-eldoc-mode))
  :config
  (progn
    (setq-default eldoc-documentation-function 'describe-char-eldoc)
    (setq eldoc-idle-delay 0.1))
  :diminish eldoc-mode)
#+END_SRC
** url
#+BEGIN_SRC emacs-lisp
(use-package url
  :ensure nil
  :config (setq url-cookie-file (concat my/dir-etc "url-cookies")))
#+END_SRC
** goto-addr
#+BEGIN_SRC emacs-lisp
(use-package goto-addr
  :commands (goto-address-mode goto-address-prog-mode)
  :init
  (progn
    (add-hook 'text-mode-hook 'goto-address-mode)
    (add-hook 'prog-mode-hook 'goto-address-prog-mode)))
#+END_SRC
** browse-url-dwim
#+BEGIN_SRC emacs-lisp
(use-package browse-url-dwim
  :commands browse-url-xdg-open
  :init
  (setq browse-url-browser-function 'browse-url-xdg-open
        browse-url-dwim-always-confirm-extraction nil))
#+END_SRC
** spacemacs-theme
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :defer t
  :init (load-theme 'spacemacs-dark t))
#+END_SRC
** spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :config
  (progn
    (require 'spaceline-config)
    (spaceline-spacemacs-theme)
    (spaceline-helm-mode)
    (setq powerline-default-separator 'arrow
          spaceline-workspace-numbers-unicode t
          spaceline-window-numbers-unicode t)))
#+END_SRC
** indent-guide
#+BEGIN_SRC emacs-lisp
(use-package indent-guide
  :commands indent-guide-mode
  :init (add-hook 'prog-mode-hook 'indent-guide-mode)
  :diminish indent-guide-mode)
#+END_SRC
** visual-fill-column
#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column
  :config (setq visual-fill-column-width nil))
#+END_SRC
** hl-line
#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :config (global-hl-line-mode 1))
#+END_SRC
** ag
#+BEGIN_SRC emacs-lisp
(use-package ag
  :defer t
  :config
  (setq ag-highlight-search t
        ag-reuse-window nil
        ag-reuse-buffers t))
#+END_SRC
** paren
#+BEGIN_SRC emacs-lisp
(use-package paren
  :commands show-paren-mode
  :init (add-hook 'prog-mode-hook 'show-paren-mode)
  :config
  (setq show-paren-delay 0
        show-paren-style 'parenthesis))
#+END_SRC
** uniquify
#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :ensure nil
  :config (setq uniquify-buffer-bane-style 'forward))
#+END_SRC
** winner
#+BEGIN_SRC emacs-lisp
(use-package winner
  :bind (("C-c <left>" . winner-undo)
         ("C-c <right>" . winner-redo))
  :config (winner-mode 1))
#+END_SRC
** recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :commands recentf-mode
  :init
  (progn
    (setq recentf-save-file (concat my/dir-etc "recent")
          recentf-max-saved-items 1000
          recentf-exclude '(".emacs.d/src"
                            ".emacs.d/etc"
                            "^/tmp/"
                            "COMMIT_EDITMSG$"
                            ".gz$")
          recentf-auto-cleanup 300
          recentf-filename-handlers '(abbreviate-file-name))
    (recentf-mode 1)))
#+END_SRC
** persp-mode
#+BEGIN_SRC emacs-lisp
(use-package persp-mode
  :init (setq persp-keymap-prefix (kbd "C-x x"))
  :config
  (progn
    (setq persp-autokill-buffer-on-remove 'kill-weak
          persp-save-dir (concat my/dir-etc "persp-confs/")
          persp-auto-save-num-of-backups 0
          persp-auto-save-opt 0
          persp-auto-resume-time 0.5
          persp-set-last-persp-for-new-frames nil)
    (def-persp-buffer-save/load :mode 'inferior-emacs-lisp-mode :tag-symbol 'def-ielm-buffer
      :save-vars '(major-mode default-directory)
      :after-load-function (lambda (b &rest _) (with-current-buffer b (ielm))))
    (def-persp-buffer-save/load :mode 'sly-mrepl-mode :tag-symbol 'def-sly-buffer
      :save-vars '(major-mode)
      :after-load-function (lambda (b &rest _) (with-current-buffer b (sly))))
    (add-hook 'after-init-hook (lambda () (persp-mode 1)))))
#+END_SRC
** autorevert
#+BEGIN_SRC emacs-lisp
(use-package autorevert
  :config
  (progn
    (global-auto-revert-mode 1)
    (setq auto-revert-remote-files t
          global-auto-revert-non-file-buffers t))
  :diminish auto-revert-mode)
#+END_SRC
** saveplace
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init (save-place-mode 1)
  :config
  (setq save-place-file (concat my/dir-etc "places")
        save-place-forget-unreadable-files nil))
#+END_SRC
** elisp-slime-nav
#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :config
  (dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
    (add-hook hook 'elisp-slime-nav-mode))
  :diminish elisp-slime-nav-mode)
#+END_SRC
** fill
#+BEGIN_SRC emacs-lisp
(use-package fill
  :ensure nil
  :commands (turn-on-auto-fill auto-fill-mode)
  :init
  (progn
    (dolist (hook '(text-mode-hook org-mode-hook))
      (add-hook hook 'turn-on-auto-fill))
    (add-hook 'prog-mode-hook
              (lambda ()
                (setq-local comment-auto-fill-only-comments t)
                (auto-fill-mode 1)))
    (diminish 'auto-fill-function)))
#+END_SRC
** elec-pair
#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :config (electric-pair-mode 1))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :defer t)
#+END_SRC
** comment-dwim-2
#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
  :commands comment-dwim-2)
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :init
  (progn
    (setq projectile-cache-file (concat my/dir-etc "project-cache")
          projectile-known-projects-file (concat my/dir-etc "project-bookmarks"))
    (projectile-global-mode 1)
    (run-with-idle-timer 10 nil #'projectile-cleanup-known-projects))
  :config
  (progn
    (add-to-list 'projectile-ignored-projects "~/")
    (setq projectile-find-dir-includes-top-level t
          projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".fasl")))
  :diminish projectile-mode)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :demand t
  :bind (("M-x" . helm-M-x)
         ("M-y" . helm-show-kill-ring)
         ("C-x C-f" . helm-find-files)
         ("C-x C-b" . helm-buffers-list)
         ("C-x b" . persp-switch-to-buffer)
         ("C-x C-r" . helm-recentf)
         ("C-x r" . helm-recentf)
         :map helm-map
         ("<tab>" . helm-execute-persistent-action))
  :config
  (progn
    (helm-mode 1)
    (helm-autoresize-mode 1)
    (setq helm-display-header-line nil
          helm-idle-delay 0.0
          helm-input-idle-delay 0.01
          helm-quick-update t
          helm-split-window-in-side-p t
          helm-M-x-fuzzy-match t
          helm-M-x-requires-pattern nil
          helm-buffers-fuzzy-matching t
          helm-bookmark-show-location t
          helm-recentf-fuzzy-match t
          helm-move-to-line-cycle-in-source nil
          helm-ff-skip-boring-files t
          helm-ff-file-name-history-use-recentf nil
          helm-ff-file-compressed-list '("gz" "bz2" "zip" "tgz" "7z" "xz")
          helm-candidate-number-limit 1000))
  :diminish helm-mode)

(use-package swiper-helm
  :bind (("C-s" . swiper-helm)))

(use-package helm-projectile
  :after projectile
  :config
  (progn
    (helm-projectile-on)
    (setq projectile-switch-project-action 'helm-projectile)))

(use-package helm-ls-git
  :defer t)

(use-package helm-ag
  :defer t
  :config (setq helm-ag-fuzzy-match t
                helm-ag-base-command "rg --vimgrep --smart-case --no-heading"))
#+END_SRC
** auto-complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :config
  (progn
    (ac-config-default)
    (ac-flyspell-workaround)
    (ac-linum-workaround)
    (define-key ac-completing-map "\r" 'ac-complete)
    (setf ac-comphist-file (concat my/dir-etc "completion-history")
          ac-use-quick-help nil
          ac-ignore-case t
          ac-use-fuzzy t
          ac-trigger-key "TAB"
          ac-auto-start nil))
  :diminish auto-complete-mode)
#+END_SRC
** diff-hl
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :commands (global-diff-hl-mode diff-hl-dired-mode)
  :init
  (progn
    (global-diff-hl-mode 1)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode))
  :config
  (unless (display-graphic-p)
    (diff-hl-margin-mode)))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :config
  (progn
    (setq magit-log-arguments '("--graph" "--decorate" "--color")
          magit-save-repository-buffers 'dontask
          magit-revert-buffers 'silent)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)))
#+END_SRC
** gist
#+BEGIN_SRC emacs-lisp
(use-package gist
  :defer t
  :config (setq gist-view-gist t)
  :diminish gist-mode)
#+END_SRC
** tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (setq tramp-default-method "ssh"
        tramp-persistency-file-name (concat my/dir-etc "tramp-history")))
#+END_SRC
** ace-link
#+BEGIN_SRC emacs-lisp
(use-package ace-link
  :after org
  :bind (:map org-mode-map
              ("M-o" . ace-link-org))
  :config (ace-link-setup-default))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
(defun calc-offset-on-org-level ()
  "Calculate offset (in chars) on current level in org mode file."
  (* (or (org-current-level) 0) org-indent-indentation-per-level))

(defun my-org-fill-paragraph (&optional JUSTIFY)
  "Calculate apt fill-column value and fill paragraph."
  (let* ((fill-column (- fill-column (calc-offset-on-org-level))))
    (org-fill-paragraph JUSTIFY)))

(defun my-org-auto-fill-function ()
  "Calculate apt fill-column value and do auto-fill"
  (let* ((fill-column (- fill-column (calc-offset-on-org-level))))
    (org-auto-fill-function)))

(defun my-org-mode-hook ()
  (setq fill-paragraph-function   'my-org-fill-paragraph
        normal-auto-fill-function 'my-org-auto-fill-function))

(use-package org
  :defer t
  :config
  (progn
    (add-hook 'org-load-hook 'my-org-mode-hook)
    (add-hook 'org-mode-hook 'my-org-mode-hook)
    (setq org-directory "~/dev/org"
          org-default-notes-file (concat org-directory "/notes.org")
          org-catch-invisible-edits 'show-and-error
          org-publish-timestamp-directory (concat my/dir-etc "org-timestamps/")
          org-html-todo-kwd-class-prefix "keyword "
          org-startup-indented t
          org-ellipsis " […]"
          org-return-follows-link t
          org-src-fontify-natively t
          org-hide-emphasis-markers t
          org-src-preserve-indentation t
          org-startup-folded t
          org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "|" "DONE(d)")
                              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")
                              (sequence "REPORTED(r@/!)" "BUG(b@/!)" "|" "FIXED(f@/!)"))
          org-todo-keyword-faces '(("TODO" :foreground "dodger blue" :weight bold)
                                   ("INPROGRESS" :foreground "spring green" :weight bold)
                                   ("WAITING" :foreground "yellow" :weight bold)
                                   ("HOLD" :foreground "yellow" :weight bold)
                                   ("DONE" :foreground "forest green" :weight bold)
                                   ("CANCELLED" :foreground "forest green" :weight bold)
                                   ("REPORTED" :foreground "red" :weight bold)
                                   ("BUG" :foreground "red" :weight bold)
                                   ("FIXED" :foreground "forest green" :weight bold))
          org-capture-templates '(("t" "Task" entry (file org-default-notes-file)
                                   "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n")))))

(use-package org-indent
  :ensure nil
  :after org
  :defer t
  :diminish org-indent-mode)

(use-package org-bullets
  :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :commands 'rainbow-mode
  :init
  (dolist (hook '(web-mode-hook css-mode-hook))
    (add-hook hook 'rainbow-mode))
  :diminish rainbow-mode)
#+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer t
  :mode "\\.html?\\'"
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-enable-auto-pairing t))
#+END_SRC
** css-eldoc
#+BEGIN_SRC emacs-lisp
(use-package css-eldoc
  :commands turn-on-css-eldoc
  :init (add-hook 'css-mode-hook 'turn-on-css-eldoc))
#+END_SRC
** paredit
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :commands enable-paredit-mode
  :init
  (dolist (hook lisp-hooks)
    (add-hook hook 'enable-paredit-mode))
  :config
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round)
  :diminish paredit-mode)
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :init
  (dolist (hook lisp-hooks)
    (add-hook hook 'rainbow-delimiters-mode))
  :config
  (progn
    (cl-loop with colors = '("#ff4b4b" "#5fafd7")
             for index from 1 to rainbow-delimiters-max-face-count
             do (set-face-foreground
                 (intern (format "rainbow-delimiters-depth-%d-face" index))
                 (elt colors (if (cl-evenp index) 0 1))))
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground 'unspecified
                        :inherit 'show-paren-mismatch)))
#+END_SRC
** anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :config
  (progn
    (global-anzu-mode 1)
    (setq anzu-mode-line-p nil)
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap-query-replace-regexp] 'anzu-query-replace-regexp))
  :diminish anzu-mode)
#+END_SRC
** winum
#+BEGIN_SRC emacs-lisp
(use-package winum
  :init (setq winum-auto-setup-mode-line nil)
  :config (winum-mode))
#+END_SRC
** eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :config
  (progn
    (eyebrowse-mode t)))
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :bind (("<f12>" . neotree-toggle))
  :config
  (progn
    (setq neo-smart-open t
          neo-theme 'ascii)))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
(use-package company
  :init (global-company-mode)
  :config
  (progn
    (company-tng-configure-default)
    (setq company-tooltip-align-annotations t
          company-selection-wrap-around t
          company-idle-delay 0.1)))
#+END_SRC
** common lisp
#+BEGIN_SRC emacs-lisp
(use-package sly
  :defer t
  :commands sly
  :bind
  (:map sly-mrepl-mode-map
        ("<up>" . sly-mrepl-previous-input-or-button)
        ("<down>" . sly-mrepl-next-input-or-button))
  :config
  (progn
    (setq sly-lisp-implementations `((sbcl ("sbcl") :env ("SBCL_HOME=/usr/lib/sbcl")))
          sly-mrepl-history-file-name (concat my/dir-etc "sly-repl-history")
          sly-autodoc-use-multiline t
          sly-complete-symbol*-fancy t
          sly-kill-without-query-p t
          sly-repl-history-remove-duplicates t
          sly-repl-history-trim-whitespaces t
          sly-net-coding-system 'utf-8-unix)
    (sly-setup '(sly-fancy))))

(use-package sly-company
  :config
  (progn
    (add-hook 'sly-mode-hook 'sly-company-mode)
    (add-to-list 'company-backends 'sly-company)))

(use-package sly-macrostep
  :defer t)

(use-package sly-repl-ansi-color
  :quelpa ((sly-repl-ansi-color
            :fetcher github
            :repo "PuercoPop/sly-repl-ansi-color"))
  :demand t
  :config (push 'sly-repl-ansi-color sly-contribs))
#+END_SRC
** sh
#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :commands sh-mode
  :mode (("\\.*bashrc$" . sh-mode)
         ("\\.*bash_profile$" . sh-mode)
         ("\\.sh\\'" . sh-mode)
         ("\\.*zshrc$" . sh-mode)
         ("\\.zsh\\'" . sh-mode))
  :config
  (setq-default sh-indentation 2
                sh-basic-offset 2))
#+END_SRC
** racket
#+BEGIN_SRC emacs-lisp
(use-package racket-mode
  :commands racket-unicode-input-method-enable
  :init
  (progn
    (setq tab-always-indent t)
    (dolist (hook '(racket-mode-hook racket-repl-mode-hook))
      (add-hook hook 'racket-unicode-input-method-enable))))
#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode (("\\.rs\\'" . rust-mode))
  :config
  (progn
    (setq rust-format-on-save t)
    (add-hook 'rust-mode-hook #'racer-mode)))

(use-package racer
  :after rust-mode
  :defer t
  :init
  (progn
    (setq racer-rust-src-path "/usr/src/rust/src"
          racer-cmd "~/.cargo/bin/racer"))
  :config
  (progn
    (add-hook 'racer-mode-hook #'eldoc-mode)))

(use-package company-racer
:bind (("TAB" . company-indent-or-complete-common))
  :config
  (progn
    (add-hook 'racer-mode-hook #'company-mode)))

(use-package flycheck-rust
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

(use-package cargo
  :config (add-hook 'rust-mode-hook #'cargo-minor-mode))
#+END_SRC
* Menus
** Root
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-root (:exit t :hint nil)
  "
^Commands^
^^--------------------
_a_: Applications
_B_: Bookmarks
_f_: Files
_g_: Git
_h_: Help
_o_: OrgMode
_p_: Projects
_t_: Text Manipulation
_w_: Windows
_<SPC>_: Layout
"
  ("a" my/hydra-apps/body)
  ("B" helm-bookmarks)
  ("f" my/hydra-find/body)
  ("g" my/hydra-git/body)
  ("h" my/hydra-help/body)
  ("o" my/hydra-org/body)
  ("p" my/hydra-projects/body)
  ("t" my/hydra-text/body)
  ("w" my/hydra-windows/body)
  ("<SPC>" my/hydra-layout/body)
  ("q" nil))
(global-set-key (kbd "<f20>") 'my/hydra-root/body)
#+END_SRC

** Help
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-help (:exit t :hint nil)
   "
  ^Help^
  ^^---------------------
  _c_: Describe character
  _f_: Describe function
  _k_: Describe key
  _m_: Describe modes
  _v_: Describe variable
  "
   ("c" describe-char)
   ("f" describe-function)
   ("k" describe-key)
   ("m" describe-mode)
   ("v" describe-variable)
   ("q" nil))
(global-set-key (kbd "C-c h") 'my/hydra-help/body)
#+END_SRC
** Apps
#+BEGIN_SRC emacs-lisp

(defhydra my/hydra-apps (:exit t :hint nil)
   "
  ^Applications^
  ^^---------------
  _b_: Browse URL
  _e_: IELM
  _p_: Packages
  _w_: Feed reader
  "
   ("b" browse-url-dwim-guess)
   ("e" ielm)
   ("p" paradox-list-packages)
   ("w" elfeed))
(global-set-key (kbd "C-c a") 'my/hydra-apps/body)
#+END_SRC
** Find
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-find (:exit t :hint nil)
   "
  _b_: Search text in all buffers
  _f_: Find files
  _p_: Project search
  _r_: Recent files
  _s_: Search text in file
  "
   ("b" helm-do-ag-buffers)
   ("f" helm-find-files)
   ("p" helm-ag-project-root)
   ("r" helm-recentf)
   ("s" helm-do-ag-this-file))
(global-set-key (kbd "C-c f") 'my/hydra-find/body)
#+END_SRC
** Text
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-text (:hint nil)
   "
  ^Text Manipulation^
  ^^--------------------------------
  _c_     : Toggle line/region commented
  _jc_    : Jump to character
  _jw_    : Jump to word
  _jl_    : Jump to line
  _l_     : Toggle line numbers
  _r_     : Replace symbol at cursor
  _R_     : Replace queried text
  _u_     : Show undo tree
  "
   ("c" comment-dwim-2)
   ("jc" avy-goto-char :exit t)
   ("jw" avy-goto-word-1 :exit t)
   ("jl" avy-goto-line :exit t)
   ("l" nlinum-mode)
   ("r" anzu-replace-at-cursor-thing :exit t)
   ("R" anzu-query-replace :exit t)
   ("u" undo-tree-visualize :exit t)
   ("q" nil))
(global-set-key (kbd "C-c t") 'my/hydra-text/body)
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-windows (:exit t :hint nil)
   "
  ^Windows^
  ^^--------------------------------
  _|_ : Split right
  _-_ : Split below
  _c_ : Switch window configuration
  _d_ : Delete
  _m_ : Maximize
  _w_ : Jump to window
  "
   ("|" split-window-right)
   ("-" split-window-below)
   ("c" eyebrowse-switch-to-window-config)
   ("d" delete-window)
   ("m" delete-other-windows)
   ("w" ace-window)
   ("q" nil))
(global-set-key (kbd "C-c w") 'my/hydra-windows/body)
#+END_SRC
** Projects
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-projects (:exit t :hint nil)
   "
  ^Project Management^
  ^^----------------------------
  _f_: Project files
  _k_: Kill project's buffers
  _r_: Find recent project files
  _p_: Switch project
  _s_: Search project
  _S_: Save all project files
  "
   ("f" helm-projectile-find-file)
   ("k" projectile-kill-buffers)
   ("r" helm-projectile-recentf)
   ("p" helm-projectile-switch-project)
   ("s" helm-ag-project-root)
   ("S" projectile-save-project-buffers)
   ("q" nil))
(global-set-key (kbd "C-c P") 'my/hydra-projects/body)
#+END_SRC
** Git
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-git (:exit t :hint nil)
   "
  ^Gists^                ^Git^
  ^^^^----------------------------------
  _l_: List gists        _s_: Git status
  _g_: Post gist
  _G_: Post private gist
  "
   ("l" gist-list)
   ("g" gist-region-or-buffer)
   ("G" gist-region-or-buffer-private)
   ("s" magit-status)
   ("q" nil))
 (global-set-key (kbd "C-c g") 'my/hydra-git/body)
#+END_SRC
** Layouts
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-layout (:exit t :hint nil)
   "
^Layout^
^^----------------
_<left>_: Previous layout
_<right>_: Next layout
_ba_: Add buffer
_bk_: Remove buffer
_bK_: Kill buffer
_bl_: Switch buffer
_fl_: Load layout
_fs_: Save layout
_r_: Rename layout
_<SPC>_: Switch layout
"
   ("<left>" persp-prev :exit nil)
   ("<right>" persp-next :exit nil)
   ("ba" persp-add-buffer)
   ("bk" persp-remove-buffer)
   ("bK" persp-kill-buffer)
   ("bl" persp-switch-to-buffer)
   ("fl" persp-load-state-from-file)
   ("fs" persp-save-state-to-file)
   ("r" persp-rename)
   ("<SPC>" persp-frame-switch)
   ("q" nil))
(global-set-key (kbd "C-c l") 'my/hydra-layout/body)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-org (:exit t :hint nil)
   "
^OrgMode^
^^----------------
_a_: Open agenda
_A_: Archive item
_c_: Capture
_f_: Refile item
_l_: Copy link
_L_: Paste link
_p_: Publish project
_P_: Publish all projects
_t_: Add tags
_T_: Tangle file
"
   ("a" org-agenda)
   ("A" archive)
   ("c" helm-org-capture-templates)
   ("f" org-refile)
   ("l" org-store-link)
   ("L" org-insert-link)
   ("p" org-publish-project)
   ("P" org-publish-all)
   ("t" org-set-tags-command)
   ("T" org-babel-tangle)
   ("q" nil))
(global-set-key (kbd "C-c o") 'my/hydra-org/body)
#+END_SRC
** Feeds
#+BEGIN_SRC emacs-lisp
(defhydra my/hydra-feeds (:exit t :hint nil)
  "
^Feeds^
^^--------------------
_A_: Show all
_U_: Show unread
_T_: Show today
_fe_: Filter Emacs
_fl_: Filter Lisp
_fcl_: Filter Common Lisp
_f*_: Filter starred
_*_: Toggle article starred
"
  ("A" (elfeed-search-set-filter "@6-months-ago"))
  ("U" (elfeed-search-set-filter "@6-months-ago +unread"))
  ("T" (elfeed-search-set-filter "@1-day-ago"))
  ("fe" (elfeed-search-set-filter "@6-months-ago +emacs"))
  ("fl" (elfeed-search-set-filter "@6-months-ago +lisp"))
  ("fcl" (elfeed-search-set-filter "@6-months-ago +commonlisp"))
  ("f*" (elfeed-search-set-filter "@6-months-ago +starred"))
  ("*" (elfeed-toggle-star))
  ("q" nil))
#+END_SRC
